/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.27
 * Generated at: 2024-06-28 23:02:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.*;
import java.io.*;
import java.util.Random;
import com.ewheelz.ConnectionPool;

public final class ShowTravels_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.ewheelz.ConnectionPool");
    _jspx_imports_classes.add("java.util.Random");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\r\n");
      out.write("<HTML>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<HEAD>\r\n");
      out.write("\r\n");
      out.write("	<LINK href=\"styles.css\" type=\"text/css\" rel=\"stylesheet\">\r\n");
      out.write("\r\n");
      out.write("<title>List Available Travels</title>\r\n");
      out.write("<SCRIPT LANGUAGE=\"JavaScript\">\r\n");
      out.write("\r\n");
      out.write("function sendInfo(txtVal)\r\n");
      out.write("{       alert (\"SendInfo is called for \" + txtVal);\r\n");
      out.write("      /*   var txt1 = document.ctis[\"cons\"][\"TravelsId\"].value;\r\n");
      out.write("        alert(\"The text1 is \" + txt1); */\r\n");
      out.write("		var txt = window.opener.document.forms[0].TravelsId;\r\n");
      out.write("		txt.value = txtVal;\r\n");
      out.write("		window.close();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</SCRIPT>\r\n");
      out.write("</HEAD>\r\n");
      out.write("\r\n");
      out.write("<body  class=\"SC\">\r\n");
      out.write("\r\n");
      out.write("<h2 align=center>Travels Details</h2>\r\n");
      out.write("<form name=cons>\r\n");
      out.write("<center><input type=button value=close onclick=\"window.close()\"></center>\r\n");
      out.write("\r\n");
 

/*Declaration of variables*/

Connection con=null;
Statement stmt=null;
ResultSet rs=null;
String TravelsId,Travels,Location,Address,AgentName,PhoneNumber;
System.out.println("--1---");

try
{

	/*Getting the connection variable from session*/

	//Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
	con = com.ewheelz.ConnectionPool.getConnection();
	stmt =  con.createStatement();
	String Query = "Select * from travelsmaster";

	System.out.println("--1--"+Query);
	rs = stmt.executeQuery(Query);
}
catch(Exception e)
{
	//System.out.println("Exception"+e);
	
      out.print(e);

}


      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

if(rs!=null)
{
//System.out.println("Resultset is not null");


      out.write("\r\n");
      out.write("	<!--Displaying the table header-->\r\n");
      out.write("\r\n");
      out.write("	<br>\r\n");
      out.write("<!--	<DIV STYLE=\"overflow:scroll;width:650px; height:400px;\">-->\r\n");
      out.write("\r\n");
      out.write("	<table class=notebook align=center>\r\n");
      out.write("							<tr class=row_title>\r\n");
      out.write("							<th align=\"left\">TravelsId</th>\r\n");
      out.write("							<th align=\"left\">Travels</th>\r\n");
      out.write("							<th align=\"left\">Location</th>\r\n");
      out.write("							<th align=\"left\">Address</th>\r\n");
      out.write("							<th align=\"left\">AgentName</th>\r\n");
      out.write("							<th align=\"left\">PhoneNumber</th>\r\n");
      out.write("							</tr>\r\n");

int DisRow=0;
	/*Getting the values from the database*/

	while(rs.next())
	{TravelsId=rs.getString(1);
	Travels=rs.getString(2);
	   Location=rs.getString(3);
	   Address=rs.getString(4);
	   AgentName=rs.getString(5);
	   PhoneNumber=rs.getString(6);
	   DisRow++;
	
      out.write("\r\n");
      out.write(" 	<tr class= ");
      out.print((DisRow%2!=0)? "row_even" : "row_odd");
      out.write(">\r\n");
      out.write("	    <td><a href=\"#\" onclick=\"sendInfo('");
      out.print(TravelsId);
      out.write("')\">");
      out.print(TravelsId);
      out.write("</a></td></a>\r\n");
      out.write("		<td><a href=\"#\" onclick=\"sendInfo('");
      out.print(TravelsId);
      out.write("')\">");
      out.print(TravelsId);
      out.write("</a></td>\r\n");
      out.write("		<td>");
      out.print(Travels);
      out.write("</td>\r\n");
      out.write("		<td>");
      out.print(Location);
      out.write("</td>\r\n");
      out.write("		<td>");
      out.print(Address);
      out.write("</td>\r\n");
      out.write("		<td>");
      out.print(AgentName);
      out.write("</td>\r\n");
      out.write("		<td>");
      out.print(PhoneNumber);
      out.write("</td>\r\n");
      out.write("\r\n");
      out.write("	");

	}


	rs.close();
	
if(DisRow==0)
{
	/*To write to the server if the resultset is null*/
	
      out.write("\r\n");
      out.write("		\r\n");
      out.write("			<tr><th colspan=6>No Records found</th></tr>\r\n");
      out.write("\r\n");
      out.write("		\r\n");
      out.write("	");


}

}

      out.write("\r\n");
      out.write("</table>\r\n");
      out.write("</form>\r\n");
      out.write("</BODY>\r\n");
      out.write("</HTML>\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
